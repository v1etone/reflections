Reflections for Lesson 2

What happens when you initialize a repository? Why do you need to do it?
Initializing a repository will create a .git "folder", you need to do it in order to create commits or a place where you can
access the commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It is a stage before the repository, you can choose to which files be included in a single commit, doing so you can structure your commits better.

How can you use the staging area to make sure you have one commit per logical change?
Using the staging area, we can compare between two files in both staging area and working space and commit and staging area

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are useful if you want to add new features but still want to have a running version, or if another person wants to add some code to the master branch
and you like to work on another feature.

How do the diagrams help you visualize the branch structure?
By having diagrams you don't lose the overview of the branch structure. Also you can see at which commits you started a new branch or merge a branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging to branches together = The merged branch has the name of the checked out branch or if you use
git checkout branch1 branch2 the second branch. It is represented as a new commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Git warns you if you have differences and you can manually look at the differences and see if you understand those changes.


Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging